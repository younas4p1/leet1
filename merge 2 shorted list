# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        
        # 1. Initialize a dummy node and a pointer to build the new list.
        # 'dummy' serves as the starting point, and 'tail' points to the last node added.
        dummy = ListNode(0)
        tail = dummy
        
        # 2. Iterate while both lists have nodes remaining.
        while list1 and list2:
            # Compare the values of the current nodes in both lists.
            if list1.val <= list2.val:
                # If list1's value is smaller (or equal), append list1's node to the new list.
                tail.next = list1
                list1 = list1.next  # Move list1 pointer forward
            else:
                # If list2's value is smaller, append list2's node to the new list.
                tail.next = list2
                list2 = list2.next  # Move list2 pointer forward
            
            # Move the 'tail' pointer to the last node added.
            tail = tail.next
            
        # 3. Append the remaining nodes from the non-empty list.
        # Since both input lists were sorted, we just attach the remainder.
        if list1:
            tail.next = list1
        elif list2:
            tail.next = list2
            
        # The merged list starts at the node immediately following the dummy head.
        return dummy.next
