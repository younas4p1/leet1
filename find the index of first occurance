class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        
        # Edge case: If needle is empty, return 0 as per common specifications.
        if not needle:
            return 0
        
        N = len(needle)
        H = len(haystack)
        
        # We only need to iterate through haystack up to the point where 
        # the remaining length is at least the length of the needle.
        # This is (H - N) + 1 possible starting positions.
        for i in range(H - N + 1):
            # Check if the substring of haystack starting at index i
            # and having the length of needle (N) is equal to needle.
            if haystack[i : i + N] == needle:
                # If they match, we've found the first occurrence.
                return i
                
        # If the loop completes without finding a match.
        return -1class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        
        # Edge case: If needle is empty, return 0 as per common specifications.
        if not needle:
            return 0
        
        N = len(needle)
        H = len(haystack)
        
        # We only need to iterate through haystack up to the point where 
        # the remaining length is at least the length of the needle.
        # This is (H - N) + 1 possible starting positions.
        for i in range(H - N + 1):
            # Check if the substring of haystack starting at index i
            # and having the length of needle (N) is equal to needle.
            if haystack[i : i + N] == needle:
                # If they match, we've found the first occurrence.
                return i
                
        # If the loop completes without finding a match.
        return -1
