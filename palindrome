class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        # Edge Cases
        # 1. Negative numbers cannot be palindromes (e.g., -121 reads 121- backward).
        # 2. Numbers ending in 0 (and not being 0 itself) cannot be palindromes 
        #    (e.g., 10 reads 01 backward).
        if x < 0 or (x % 10 == 0 and x != 0):
            return False
            
        # We will build the reversed half of the number here.
        reversed_half = 0
        
        # Loop continues as long as the original number (x) is greater than the reversed half.
        # When reversed_half >= x, we have processed at least half the digits.
        while x > reversed_half:
            # Extract the last digit of x and append it to reversed_half.
            digit = x % 10
            reversed_half = reversed_half * 10 + digit
            
            # Remove the last digit from x.
            x //= 10
            
        # Check for Palindrome
        # 1. Even number of digits: x == reversed_half (e.g., 1221 -> x=12, reversed_half=12)
        # 2. Odd number of digits: x == reversed_half // 10 (e.g., 121 -> x=1, reversed_half=12. 
        #    We ignore the middle digit of reversed_half by dividing by 10)
        return x == reversed_half or x == reversed_half // 10
