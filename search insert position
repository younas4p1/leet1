class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        # Initialize the left and right boundaries for the binary search
        left = 0
        right = len(nums) - 1
        
        # Standard Binary Search loop
        while left <= right:
            mid = left + (right - left) // 2  # Calculate middle index to prevent overflow
            
            if nums[mid] == target:
                # Target found, return its index
                return mid
            elif nums[mid] < target:
                # Target is in the right half (or will be inserted after mid)
                left = mid + 1
            else: # nums[mid] > target
                # Target is in the left half (or will be inserted before mid)
                right = mid - 1
                
        # If the loop finishes, the target was not found.
        # The 'left' pointer points to the insertion point.
        # This is because 'left' is the first index where nums[left] > target.
        return left
